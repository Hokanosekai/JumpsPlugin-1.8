package fr.hokanosekai.listeners;import fr.hokanosekai.Jumps;import fr.hokanosekai.managers.JumpsManager;import fr.hokanosekai.utils.FileU;import fr.hokanosekai.utils.Items;import fr.hokanosekai.utils.Jump;import org.bukkit.GameMode;import org.bukkit.Location;import org.bukkit.Material;import org.bukkit.configuration.ConfigurationSection;import org.bukkit.configuration.file.FileConfiguration;import org.bukkit.entity.Player;import org.bukkit.event.EventHandler;import org.bukkit.event.Listener;import org.bukkit.event.entity.EntityDamageByEntityEvent;import org.bukkit.event.entity.EntityDamageEvent;import org.bukkit.event.entity.FoodLevelChangeEvent;import org.bukkit.event.player.PlayerDropItemEvent;import org.bukkit.event.player.PlayerJoinEvent;import org.bukkit.event.player.PlayerMoveEvent;import org.bukkit.event.player.PlayerQuitEvent;import org.bukkit.inventory.ItemStack;import java.util.ArrayList;import java.util.HashMap;public class PlayerListener implements Listener {    Jumps plugin = Jumps.getInstance();    @EventHandler    public void onJoin(PlayerJoinEvent e){        e.setJoinMessage("§7[§a+§7] §a" + e.getPlayer().getName());        ItemStack pearl = Items.createItem("§eRestart", Material.ENDER_PEARL);        Player p = e.getPlayer();        p.getInventory().clear();        p.getInventory().setItem(0, pearl);        p.setFoodLevel(20);        if (p.getGameMode().equals(GameMode.CREATIVE)){            p.setGameMode(GameMode.SURVIVAL);        }    }    @EventHandler    public void onFood(FoodLevelChangeEvent e){        e.setCancelled(true);    }    @EventHandler    public void onLeave(PlayerQuitEvent e){        e.setQuitMessage("§7[§c-§7] §c" + e.getPlayer().getName());    }    @EventHandler    public void onDamage(EntityDamageByEntityEvent e){        e.setCancelled(true);    }    @EventHandler    public void onFall(EntityDamageEvent e){        if (e.getCause().equals(EntityDamageEvent.DamageCause.FALL)){            e.setCancelled(true);        }    }    @EventHandler    public void onDropItem(PlayerDropItemEvent e){        if (e.getItemDrop().getItemStack().getItemMeta().getDisplayName().contains("Restart")){            e.setCancelled(true);        }    }    @EventHandler    public void onJumpStart(PlayerMoveEvent e){        FileU jumpFile = plugin.getJumpFile();        FileConfiguration jumpConfig = jumpFile.getConfig("Jumps");        Location loc = e.getPlayer().getLocation();        double playerX = Math.floor(loc.getX());        double playerY = Math.floor(loc.getY());        double playerZ = Math.floor(loc.getZ());        ConfigurationSection configurationSection = jumpConfig.getConfigurationSection("jumps");        for (String key: configurationSection.getKeys(false)){            Jump j = JumpsManager.jumps.get(key);            ArrayList<HashMap> coords = j.getCoordonnees();            if (!coords.isEmpty()){                double x = (double) coords.get(0).get("x");                double y = (double) coords.get(0).get("y");                double z = (double) coords.get(0).get("z");                if (x == playerX && y == playerY && z == playerZ){                    e.getPlayer().sendTitle(key,"");                }            }        }    }}